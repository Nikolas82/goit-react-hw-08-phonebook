{"version":3,"file":"static/js/803.50493faf.chunk.js","mappings":"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","sources":["redux/contacts/selectors.jsx","webpack://react-homework-template/./src/components/contactForm/ContactForm.module.css?fd94","components/contactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/contactList/ContactList.module.css?7e3b","components/contactList/ContactList.jsx","webpack://react-homework-template/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.isLoading;\n\nexport const selectError = state => state.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"ContactForm_text__EjP-9\",\"btn\":\"ContactForm_btn__yDDxL\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: '',\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === newContact.name.toLowerCase() ||\n          contact.number === newContact.number\n      )\n    ) {\n      return alert(\n        `${newContact.name} or ${newContact.number} is already in contacts`\n      );\n    }\n\n    dispatch(addContact(newContact));\n\n    e.target.elements.name.value = '';\n    e.target.elements.number.value = '';\n  };\n\n  return (\n    <>\n      <form onSubmit={handlerSubmit}>\n        <label>\n          <p className={css.text}>Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          <p className={css.text}>Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btnList\":\"ContactList_btnList__xHP34\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilter, selectContacts } from 'redux/contacts/selectors';\n\nimport css from './ContactList.module.css';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const items = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const contacts = items.filter(item =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"button\"\n            className={css.btnList}\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"Filter_text__+9v48\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filteredContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChangeFilter = e => {\n    dispatch(filteredContacts(e.target.value));\n  };\n\n  return (\n    <>\n      <label>\n        <p className={css.text}>Find contacts by name</p>\n        <input type=\"text\" value={filter} onChange={onChangeFilter} />\n      </label>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { ContactForm } from 'components/contactForm/ContactForm';\n\nimport { ContactList } from 'components/contactList/ContactList';\nimport { Filter } from 'components/filter/Filter';\n\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 40,\n        color: '#010101',\n        textAlign: 'center',\n        flexDirection: 'column',\n        marginTop: '40px',\n        marginBottom: '40px',\n      }}\n    >\n      <h1\n        style={{\n          fontSize: 25,\n          fontWeight: 500,\n          marginTop: '10px',\n        }}\n      >\n        Phonebook\n      </h1>\n      <ContactForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <h2\n        style={{\n          fontSize: 30,\n        }}\n      >\n        Contacts\n      </h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","newContact","id","name","target","elements","value","number","find","contact","toLowerCase","alert","addContact","className","css","type","pattern","title","required","ContactList","item","includes","map","onClick","deleteContact","Filter","onChange","filteredContacts","useEffect","fetchContacts","style","display","justifyContent","alignItems","fontSize","color","textAlign","flexDirection","marginTop","marginBottom","fontWeight"],"sourceRoot":""}